0. API
    애플리케이션 프로그래밍 인터페이스

    API 쿼리 언어로, API 를 실행하면, 그에 상응하는 데이터교환을 할 수 있다.

1. GraphQL 혹은 REST API

    두 방법의 차이는, 방식의 차이만 있을뿐, 결국 동작은 같다.

    REST API 의 경우, [ 특정 URL + HTTP METHOD ] 를 통해 endpoint"들" 을 만든다.
        그렇게 만들어진 endpoint"들" 에 접근하면, 해당 로직에 따른 값을 받을 수 있다.

        ** 가장 큰 특징으로, "유니폼 인터페이스" 를 가진다.
            즉, 내가 현재 만들고 있는 나의 앱 뿐 아니라, "어느 클라이언트"도 해당 endpoint 에 접근해
                데이터를 교환할 수 있다. 
            안드로이드든, IOS든, 웹이든 상관없이, HTTP 프로토콜을 따른다면 어디든 가능하다.

    GraphQL 의 경우 POST 요청을 통해, 모든것을 처리하는데,
        POST 요청에 담긴 QUERY 문을 통해, 어떠한 값을 어떻게 처리할지 결정한다.

        ** REST API 와 완전히 똑같지만, "쿼리문을 새로 배워야한다는 단점이 존재한다."

2. HTTP METHODS

    GET, POST , PUT, DELETE, PATCH, UPDATE

3. 동일 서버에서, Client 와 Server 를 한꺼번에 // 다른 서버에서, Client 와 Server 를 따로따로

    개별 기기를 가진 다른 서버를 가지든,
    동일 기기를 가진 동일 서버를 가지든,

    공통적으로 "로직이 분리(클라이언트, 서버)"되어있고, Json 데이터교환 방식으로 서로 관여하기 때문에
    서로 다른 기기(서버)를 사용한다는 점만 다를뿐, 사실상 같다고(관계 없다라고) 볼 수 있다.

    다만 개별 기기를 나누어 호스팅(클라이언트, 서버, 데이터베이스) 를 해야만
    성능과 내구성에 좋기 때문에, "개별기기로 나누어 따로따로 호스팅 하는 편이 좋다."


4. 데이터를(화면에 표시될) 저장하는 곳

    1) State (상태)
    2) 서버 (node.js 안에)
    3) 웹스토리지
    4) 쿠키
    5) 데이터베이스

        * 상태에 저장하면, 리렌더링 하기 전까지는 살아있다.
        * 서버에 저장하면, 서버를 재실행 할때까지는 살아있다.
        * 웹스토리지에 저장하면, 삭제하기 전까지 살아있다.
        * 쿠키에 저장하면, 브라우저 종료전까지 살아있다.
        * 데이터베이스에 저장하면, 삭제하기 전까지 살아있다.